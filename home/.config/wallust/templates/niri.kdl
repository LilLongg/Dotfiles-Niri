
// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://yalter.github.io/niri/Configuration:-Introduction

// Input device configuration.
// Find the full list of options on the wiki:
// https://yalter.github.io/niri/Configuration:-Input
input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"

            // If this section is empty, niri will fetch xkb settings
            // from org.freedesktop.locale1. You can control these using
            // localectl set-x11-keymap.
        }

        // Enable numlock on startup, omitting this setting disables it.
        numlock
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    // All commented-out settings here are examples, not defaults.
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag false
        // drag-lock
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // scroll-button-lock
        // middle-emulation
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    // warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    // focus-follows-mouse max-scroll-amount="70%"
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
output "eDP-1" {
    scale 1
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 2

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "never"

    always-center-single-column

    background-color "transparent"

    tab-indicator {
        hide-when-single-tab
    }
    
    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
        proportion 1.0
    }

    // If you leave the brackets empty, the windows themselves will decide their initial width.
    default-column-width { proportion 0.66667; }

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        off
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        width 3

		active-gradient from="{{ color1 | saturate(0.6) }}" to="{{ color6 | saturate(0.6) }}" angle=45 in="oklch longer hue"
		inactive-color "{{ cursor }}"
		urgent-color "{{ color9 | lighten(0.2) | saturate(0.6) }}"
    }

    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        //
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        //
        draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        softness 30

        // Spread expands the shadow.
        spread 5

        // Offset moves the shadow relative to the window.
        offset x=0 y=5

        // You can also change the shadow color and opacity.
        color "#0007"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        left 4
        right 4
        top 4
        bottom 4
    }
}

environment {
    GDK_BACKEND "wayland"
    GTK_USE_PORTAL "1"
    GDK_DEBUG "portals"

    QT_AUTO_SCREEN_SCALE_FACTOR "1"
    QT_WAYLAND_DISABLE_WINDOWDECORATION "1"
    QT_QPA_PLATFORMTHEME "gtk3"
    QT_QPA_PLATFORMTHEME_QT6 "gtk3"

    INPUT_METHOD "fcitx"
    GLFW_IM_MODULE "ibus"
    SDL_IM_MODULE "fcitx"
    GTK_IM_MODULE "fcitx"
    QT_IM_MODULE "fcitx"
    XMODIFIERS "@im=fcitx"

    SDL_VIDEODRIVER "wayland"
    CLUTTER_BACKEND "wayland"
    VDPAU_DRIVER "va_gl"
    ANV_DEBUG "video-decode,video-encode"

    PROTON_ENABLE_WAYLAND "1"
    PROTON_NO_WM_DECORATION "1"
    PROTON_USE_NTSYNC "1"
    PROTON_USE_WINE3D "1"
    WINE_NO_WM_DECORATION "1"

    MOZ_ENABLE_WAYLAND "1"
    CRYTOGRAPHY_OPENSSL_NO_LEGACY "1"
    EDITOR "helix"
    VISUAL "code"
    MANPAGER "nvim +Man!"
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.
spawn-at-startup "/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1"
spawn-at-startup "iwctl" "device" "wlan0" "set-property" "Powered" "on"
spawn-sh-at-startup "~/.config/niri/scripts/update_player.fish"
spawn-at-startup "waybar"
spawn-at-startup "kitty" "--hold" "fastfetch"
spawn-sh-at-startup "~/.config/niri/scripts/initbg"
spawn-sh-at-startup "mpd-notification -m ~/Music -t 5"
spawn-at-startup "avizo-service"
spawn-at-startup "cbatticon" "-l" "30" "-r" "20" "-i" "symbolic"
spawn-at-startup "activate-linux"
spawn-at-startup "protonvpn-app" "--start-minimized"
spawn-sh-at-startup "sleep 2 && vesktop --start-minimized"
spawn-sh-at-startup "sleep 2 && ferdium --start-minimized"
spawn-sh-at-startup "sleep 2 && steam -silent"

cursor {
    xcursor-theme "Layan-white-cursors"
    xcursor-size 24

    hide-after-inactive-ms 5000
}

// To run a shell command (with variables, pipes, etc.), use spawn-sh-at-startup:
// spawn-sh-at-startup "qs -c ~/source/qs/MyAwesomeShell"

hotkey-overlay {
    // Uncomment this line to disable the "Important Hotkeys" pop-up at startup.
    skip-at-startup
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
prefer-no-csd

// Animation settings.
// The wiki explains how to configure individual animations:
// https://yalter.github.io/niri/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off
    overview-open-close {
        curve "cubic-bezier" 0.05 0.9 0.1 1.05
    }
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Window-Rules
window-rule {
    opacity 0.7
    geometry-corner-radius 10
    clip-to-geometry true
    draw-border-with-background false
}

window-rule {
    match is-focused=true
    match app-id=r#"^firefox$"#
    match app-id=r#"^zen$"#

    opacity 0.75
}

window-rule {
    match app-id=r#"^firefox$"# is-focused=true
    match app-id=r#"^zen$"# is-focused=true
    
    opacity 0.85
}

window-rule {
    match app-id="mpv"
    match app-id="flameshot"
    match title="im-emoji-picker"
    match title=r#".*YouTube.*"#
    
    opacity 1.0
}

window-rule {
    match app-id="eog"
    match app-id="btop"
    match app-id="rmpc"
    match app-id="impala"
    match app-id="nemo"
    match app-id="blueman-manager"
    match app-id="protonvpn-app"
    match app-id="org.gnome.Nautilus"
    match app-id="org.gnome.FileRoller"
    match app-id="org.fcitx.fcitx5-config-qt"
    match app-id="com.saivert.pwvucontrol"
    match title="update-sys"
    match title="Picture-in-Picture"

    open-floating true
}

window-rule {
    match app-id="ferdium"

    open-maximized true
}

window-rule {
    match is-floating=true

    min-width 1064
    max-width 1280
    min-height 798
    max-height 960
}

window-rule {
    match app-id="mpv"

    open-fullscreen true
}

window-rule {
    match title="im-emoji-picker"

    open-focused false
}

window-rule {
	match is-window-cast-target=true

	border {
	    width 3
		active-gradient from="{{ color1 | saturate(0.6) }}" to="{{ color6 | saturate(0.6) }}" angle=45 in="oklch longer hue"
		inactive-color "{{ color9 | lighten(0.2) | saturate(0.6) }}"
		urgent-color "{{ color9 | lighten(0.2) | saturate(0.6) }}"
	}
}

layer-rule {
    match namespace="^wallpaper$"

    place-within-backdrop true
}

binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.

    // Mod-Shift-/, which is usually the same as Mod-?,
    // shows a list of important hotkeys.
    Mod+Escape { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+Return repeat=false hotkey-overlay-title="Open a Terminal" { spawn "kitty" "--hold" "sh" "-c" "~/.config/niri/scripts/smallfetch"; }
    Mod+T repeat=false hotkey-overlay-title=null { spawn "kitty" "--hold" "sh" "-c" "~/.config/niri/scripts/smallfetch"; }
    Mod+Shift+T repeat=false hotkey-overlay-title=null { spawn "kitty" "--hold" "fastfetch"; }
    Mod+Alt+T repeat=false hotkey-overlay-title=null { spawn "kitty" "--class" "btop" "btop"; }

    Mod+A hotkey-overlay-title="Run Application Launcher" { spawn "rofi" "-show" "drun"; }
    Mod+Shift+A hotkey-overlay-title="Change the Wallpaper" { spawn-sh "~/.config/niri/scripts/select_wpp.sh"; }

    Super+L hotkey-overlay-title="Lock the Screen" { spawn "hyprlock"; }
    Super+Shift+L hotkey-overlay-title="Session Management" { spawn "wlogout" "--protocol" "layer-shell"; }
    Super+Alt+L hotkey-overlay-title="Hibernate the System" { spawn "systemctl" "hibernate"; }

    Super+R repeat=false hotkey-overlay-title="Reload Waybar" { spawn "pkill" "-SIGUSR2" "waybar"; }
    Super+Shift+R repeat=false hotkey-overlay-title="Soft-reboot the System" { spawn "systemctl" "soft-reboot"; }
    Super+Alt+R repeat=false hotkey-overlay-title="Reboot the System" { spawn "systemctl" "reboot"; }
    
    Mod+Q repeat=false hotkey-overlay-title="Close Current Window" { close-window; }
    Mod+Shift+Q repeat=false hotkey-overlay-title="Logout of the Session" { quit; }
    Mod+Alt+Q repeat=false hotkey-overlay-title="Shutdown the System" { spawn "shutdown" "-h" "now"; }
    
    Mod+C repeat=false hotkey-overlay-title="Center the Current Column" { center-column; }
    Mod+Shift+C cooldown-ms=150 hotkey-overlay-title="Resize the Current Column" { switch-preset-column-width; }
    Mod+Alt+C cooldown-ms=150 hotkey-overlay-title="Maximize the Current Column" { maximize-column; }

    Mod+W repeat=false hotkey-overlay-title="Fullscreen a Window" { fullscreen-window; }
    Mod+Shift+W repeat=false hotkey-overlay-title="Float a Window" { toggle-window-floating; }
    Mod+Alt+W repeat=false { toggle-column-tabbed-display; }
    Mod+Tab cooldown-ms=150 hotkey-overlay-title="Switch focus between Floating and Tiling" { switch-focus-between-floating-and-tiling; }
    
    Mod+Comma  { consume-or-expel-window-left; }
    Mod+Period { consume-or-expel-window-right; }
    Mod+Shift+Comma  { consume-window-into-column; }
    Mod+Shift+Period { expel-window-from-column; }

    Mod+O repeat=false { toggle-overview; }
    Mod+Shift+O repeat=false { toggle-window-rule-opacity; }
    Mod+Alt+O repeat=false { spawn-sh "kill $(pidof swww-daemon) && swww-daemon"; }

    Mod+F repeat=false hotkey-overlay-title="Open File Manager" { spawn "nemo"; }

    Mod+Y repeat=false hotkey-overlay-title="Open MPD Manager" { spawn "kitty" "--class" "rmpc" "rmpc"; }
    Mod+M repeat=false hotkey-overlay-title="Change Media Player" { spawn-sh "~/.config/niri/scripts/playerctl.py change"; }
    Mod+P repeat=false hotkey-overlay-title="Toggle Media Play/Pause" { spawn-sh "~/.config/niri/scripts/playerctl.py toggle"; }
    Mod+Shift+P hotkey-overlay-title="Stop Media Playback" { spawn-sh "~/.config/niri/scripts/playerctl.py stop"; }
    Mod+Shift+Y repeat=false hotkey-overlay-title="Toggle Media Random" { spawn "~/.config/niri/scripts/playerctl.py shuffle"; }
    Mod+Alt+Y repeat=false hotkey-overlay-title="Toggle Media Single" { spawn-sh "~/.config/niri/scripts/playerctl.py loop"; }
    Mod+bracketleft hotkey-overlay-title="Media plays previous track" { spawn-sh "~/.config/niri/scripts/playerctl.py previous"; }
    Mod+bracketright hotkey-overlay-title="Media plays next track" { spawn-sh "~/.config/niri/scripts/playerctl.py next"; }
    Mod+Shift+bracketleft hotkey-overlay-title="Media go back 10 seconds" { spawn-sh "~/.config/niri/scripts/playerctl.py seek-bw 10"; }
    Mod+Shift+bracketright hotkey-overlay-title="Media move up 10 seconds" { spawn-sh "~/.config/niri/scripts/playerctl.py seek-fw 10"; }

    Mod+S repeat=false hotkey-overlay-title="Take a Screenshot" { spawn "flameshot" "gui" "-c"; }
    Mod+Shift+S repeat=false hotkey-overlay-title=null { spawn "flameshot" "gui" "--region" "1920x1200+0+0" "-c"; }
    Mod+V repeat=false hotkey-overlay-title="Record the Screen" { spawn-sh "~/.config/niri/scripts/record"; }
    Mod+Shift+V repeat=false hotkey-overlay-title=null { spawn "sh" "-c" "~/.config/niri/scripts/record" "select"; }
    
    Mod+B repeat=false hotkey-overlay-title="Open Bluetooth Manager" { spawn "blueman-manager"; }
    Mod+N repeat=false hotkey-overlay-title="Open Wifi Manager" { spawn "kitty" "--class" "impala" "impala"; }
    Mod+I repeat=false hotkey-overlay-title="Open Web Browser" { spawn "zen-browser"; }
    Mod+Shift+I repeat=false hotkey-overlay-title="Open Social Media" { spawn "ferdium"; }
    Mod+Alt+I repeat=false hotkey-overlay-title="Open Social Media" { spawn "vesktop"; }
    Mod+E repeat=false hotkey-overlay-title="Open Text Editor" { spawn "code"; }

    Mod+Shift+M repeat=false hotkey-overlay-title="Toggle Mute for Volume" { spawn "volumectl" "toggle-mute"; }
    Mod+Alt+M repeat=false hotkey-overlay-title=null { spawn "volumectl" "-m" "toggle-mute"; }
    Mod+Equal hotkey-overlay-title="Increase Volume" { spawn "volumectl" "up"; }
    Mod+Minus hotkey-overlay-title="Decrease Volume" { spawn "volumectl" "down"; }
    Mod+Shift+Equal hotkey-overlay-title=null { spawn "volumectl" "-m" "up"; }
    Mod+Shift+Minus hotkey-overlay-title=null { spawn "volumectl" "-m" "down"; }
    Mod+Alt+Equal hotkey-overlay-title="Increase Brightness" { spawn "lightctl" "up"; }
    Mod+Alt+Minus hotkey-overlay-title="Decrease Brightness" { spawn "lightctl" "down"; }

    F1 repeat=false hotkey-overlay-title=null { spawn "volumectl" "toggle-mute"; }
    Shift+F1 repeat=false hotkey-overlay-title=null { spawn "volumectl" "-m" "toggle-mute"; }
    F2 hotkey-overlay-title="Decrease Volume" { spawn "volumectl" "down"; }
    F3 hotkey-overlay-title="Increase Volume" { spawn "volumectl" "up"; }
    Shift+F2 hotkey-overlay-title=null { spawn "volumectl" "-m" "down"; }
    Shift+F3 hotkey-overlay-title=null { spawn "volumectl" "-m" "up"; }
    F4 hotkey-overlay-title=null { spawn "lightctl" "down"; }
    F5 hotkey-overlay-title=null { spawn "lightctl" "up"; }

    // Open/close the Overview: a zoomed-out view of workspaces and windows.
    // You can also move the mouse into the top-left hot corner,
    // or do a four-finger swipe up on a touchpad.


    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }

    Mod+Shift+Left  { move-column-left; }
    Mod+Shift+Down  { move-window-down; }
    Mod+Shift+Up    { move-window-up; }
    Mod+Shift+Right { move-column-right; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Shift+Home { move-column-to-first; }
    Mod+Shift+End  { move-column-to-last; }

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+Shift+Page_Down { move-column-to-workspace-down; }
    Mod+Shift+Page_Up   { move-column-to-workspace-up; }

    Mod+Ctrl+Page_Down { move-workspace-down; }
    Mod+Ctrl+Page_Up   { move-workspace-up; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Shift+1 { move-column-to-workspace 1; }
    Mod+Shift+2 { move-column-to-workspace 2; }
    Mod+Shift+3 { move-column-to-workspace 3; }
    Mod+Shift+4 { move-column-to-workspace 4; }
    Mod+Shift+5 { move-column-to-workspace 5; }
    Mod+Shift+6 { move-column-to-workspace 6; }
    Mod+Shift+7 { move-column-to-workspace 7; }
    Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    Mod+Alt+1 { move-window-to-workspace 1; }
    Mod+Alt+2 { move-window-to-workspace 2; }
    Mod+Alt+3 { move-window-to-workspace 3; }
    Mod+Alt+4 { move-window-to-workspace 4; }
    Mod+Alt+5 { move-window-to-workspace 5; }
    Mod+Alt+6 { move-window-to-workspace 6; }
    Mod+Alt+7 { move-window-to-workspace 7; }
    Mod+Alt+8 { move-window-to-workspace 8; }
    Mod+Alt+9 { move-window-to-workspace 9; }

    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Shift+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }
}
